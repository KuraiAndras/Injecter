### YamlMime:XRefMap
sorted: true
references:
- uid: Injecter
  name: Injecter
  href: api/Injecter.html
  commentId: N:Injecter
  fullName: Injecter
  nameWithType: Injecter
- uid: Injecter.Avalonia
  name: Injecter.Avalonia
  href: api/Injecter.Avalonia.html
  commentId: N:Injecter.Avalonia
  fullName: Injecter.Avalonia
  nameWithType: Injecter.Avalonia
- uid: Injecter.Avalonia.InjectedUserControl
  name: InjectedUserControl
  href: api/Injecter.Avalonia.InjectedUserControl.html
  commentId: T:Injecter.Avalonia.InjectedUserControl
  fullName: Injecter.Avalonia.InjectedUserControl
  nameWithType: InjectedUserControl
- uid: Injecter.Avalonia.InjectedUserControl.#ctor
  name: InjectedUserControl()
  href: api/Injecter.Avalonia.InjectedUserControl.html#Injecter_Avalonia_InjectedUserControl__ctor
  commentId: M:Injecter.Avalonia.InjectedUserControl.#ctor
  fullName: Injecter.Avalonia.InjectedUserControl.InjectedUserControl()
  nameWithType: InjectedUserControl.InjectedUserControl()
- uid: Injecter.Avalonia.InjectedUserControl.#ctor*
  name: InjectedUserControl
  href: api/Injecter.Avalonia.InjectedUserControl.html#Injecter_Avalonia_InjectedUserControl__ctor_
  commentId: Overload:Injecter.Avalonia.InjectedUserControl.#ctor
  isSpec: "True"
  fullName: Injecter.Avalonia.InjectedUserControl.InjectedUserControl
  nameWithType: InjectedUserControl.InjectedUserControl
- uid: Injecter.Avalonia.InjectedUserControl.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)
  name: OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs)
  href: api/Injecter.Avalonia.InjectedUserControl.html#Injecter_Avalonia_InjectedUserControl_OnDetachedFromVisualTree_Avalonia_VisualTreeAttachmentEventArgs_
  commentId: M:Injecter.Avalonia.InjectedUserControl.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)
  fullName: Injecter.Avalonia.InjectedUserControl.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)
  nameWithType: InjectedUserControl.OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs)
- uid: Injecter.Avalonia.InjectedUserControl.OnDetachedFromVisualTree*
  name: OnDetachedFromVisualTree
  href: api/Injecter.Avalonia.InjectedUserControl.html#Injecter_Avalonia_InjectedUserControl_OnDetachedFromVisualTree_
  commentId: Overload:Injecter.Avalonia.InjectedUserControl.OnDetachedFromVisualTree
  isSpec: "True"
  fullName: Injecter.Avalonia.InjectedUserControl.OnDetachedFromVisualTree
  nameWithType: InjectedUserControl.OnDetachedFromVisualTree
- uid: Injecter.Avalonia.InjectedUserControl.Scope
  name: Scope
  href: api/Injecter.Avalonia.InjectedUserControl.html#Injecter_Avalonia_InjectedUserControl_Scope
  commentId: P:Injecter.Avalonia.InjectedUserControl.Scope
  fullName: Injecter.Avalonia.InjectedUserControl.Scope
  nameWithType: InjectedUserControl.Scope
- uid: Injecter.Avalonia.InjectedUserControl.Scope*
  name: Scope
  href: api/Injecter.Avalonia.InjectedUserControl.html#Injecter_Avalonia_InjectedUserControl_Scope_
  commentId: Overload:Injecter.Avalonia.InjectedUserControl.Scope
  isSpec: "True"
  fullName: Injecter.Avalonia.InjectedUserControl.Scope
  nameWithType: InjectedUserControl.Scope
- uid: Injecter.Avalonia.InjectedUserControl`1
  name: InjectedUserControl<TViewModel>
  href: api/Injecter.Avalonia.InjectedUserControl-1.html
  commentId: T:Injecter.Avalonia.InjectedUserControl`1
  name.vb: InjectedUserControl(Of TViewModel)
  fullName: Injecter.Avalonia.InjectedUserControl<TViewModel>
  fullName.vb: Injecter.Avalonia.InjectedUserControl(Of TViewModel)
  nameWithType: InjectedUserControl<TViewModel>
  nameWithType.vb: InjectedUserControl(Of TViewModel)
- uid: Injecter.Avalonia.InjectedUserControl`1.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)
  name: OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs)
  href: api/Injecter.Avalonia.InjectedUserControl-1.html#Injecter_Avalonia_InjectedUserControl_1_OnAttachedToLogicalTree_Avalonia_LogicalTree_LogicalTreeAttachmentEventArgs_
  commentId: M:Injecter.Avalonia.InjectedUserControl`1.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)
  fullName: Injecter.Avalonia.InjectedUserControl<TViewModel>.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)
  fullName.vb: Injecter.Avalonia.InjectedUserControl(Of TViewModel).OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)
  nameWithType: InjectedUserControl<TViewModel>.OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs)
  nameWithType.vb: InjectedUserControl(Of TViewModel).OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs)
- uid: Injecter.Avalonia.InjectedUserControl`1.OnAttachedToLogicalTree*
  name: OnAttachedToLogicalTree
  href: api/Injecter.Avalonia.InjectedUserControl-1.html#Injecter_Avalonia_InjectedUserControl_1_OnAttachedToLogicalTree_
  commentId: Overload:Injecter.Avalonia.InjectedUserControl`1.OnAttachedToLogicalTree
  isSpec: "True"
  fullName: Injecter.Avalonia.InjectedUserControl<TViewModel>.OnAttachedToLogicalTree
  fullName.vb: Injecter.Avalonia.InjectedUserControl(Of TViewModel).OnAttachedToLogicalTree
  nameWithType: InjectedUserControl<TViewModel>.OnAttachedToLogicalTree
  nameWithType.vb: InjectedUserControl(Of TViewModel).OnAttachedToLogicalTree
- uid: Injecter.Avalonia.InjectedUserControl`1.ViewModel
  name: ViewModel
  href: api/Injecter.Avalonia.InjectedUserControl-1.html#Injecter_Avalonia_InjectedUserControl_1_ViewModel
  commentId: P:Injecter.Avalonia.InjectedUserControl`1.ViewModel
  fullName: Injecter.Avalonia.InjectedUserControl<TViewModel>.ViewModel
  fullName.vb: Injecter.Avalonia.InjectedUserControl(Of TViewModel).ViewModel
  nameWithType: InjectedUserControl<TViewModel>.ViewModel
  nameWithType.vb: InjectedUserControl(Of TViewModel).ViewModel
- uid: Injecter.Avalonia.InjectedUserControl`1.ViewModel*
  name: ViewModel
  href: api/Injecter.Avalonia.InjectedUserControl-1.html#Injecter_Avalonia_InjectedUserControl_1_ViewModel_
  commentId: Overload:Injecter.Avalonia.InjectedUserControl`1.ViewModel
  isSpec: "True"
  fullName: Injecter.Avalonia.InjectedUserControl<TViewModel>.ViewModel
  fullName.vb: Injecter.Avalonia.InjectedUserControl(Of TViewModel).ViewModel
  nameWithType: InjectedUserControl<TViewModel>.ViewModel
  nameWithType.vb: InjectedUserControl(Of TViewModel).ViewModel
- uid: Injecter.Avalonia.InjectedWindow
  name: InjectedWindow
  href: api/Injecter.Avalonia.InjectedWindow.html
  commentId: T:Injecter.Avalonia.InjectedWindow
  fullName: Injecter.Avalonia.InjectedWindow
  nameWithType: InjectedWindow
- uid: Injecter.Avalonia.InjectedWindow.#ctor
  name: InjectedWindow()
  href: api/Injecter.Avalonia.InjectedWindow.html#Injecter_Avalonia_InjectedWindow__ctor
  commentId: M:Injecter.Avalonia.InjectedWindow.#ctor
  fullName: Injecter.Avalonia.InjectedWindow.InjectedWindow()
  nameWithType: InjectedWindow.InjectedWindow()
- uid: Injecter.Avalonia.InjectedWindow.#ctor*
  name: InjectedWindow
  href: api/Injecter.Avalonia.InjectedWindow.html#Injecter_Avalonia_InjectedWindow__ctor_
  commentId: Overload:Injecter.Avalonia.InjectedWindow.#ctor
  isSpec: "True"
  fullName: Injecter.Avalonia.InjectedWindow.InjectedWindow
  nameWithType: InjectedWindow.InjectedWindow
- uid: Injecter.Avalonia.InjectedWindow.OnClosed(System.EventArgs)
  name: OnClosed(EventArgs)
  href: api/Injecter.Avalonia.InjectedWindow.html#Injecter_Avalonia_InjectedWindow_OnClosed_System_EventArgs_
  commentId: M:Injecter.Avalonia.InjectedWindow.OnClosed(System.EventArgs)
  fullName: Injecter.Avalonia.InjectedWindow.OnClosed(System.EventArgs)
  nameWithType: InjectedWindow.OnClosed(EventArgs)
- uid: Injecter.Avalonia.InjectedWindow.OnClosed*
  name: OnClosed
  href: api/Injecter.Avalonia.InjectedWindow.html#Injecter_Avalonia_InjectedWindow_OnClosed_
  commentId: Overload:Injecter.Avalonia.InjectedWindow.OnClosed
  isSpec: "True"
  fullName: Injecter.Avalonia.InjectedWindow.OnClosed
  nameWithType: InjectedWindow.OnClosed
- uid: Injecter.Avalonia.InjectedWindow.Scope
  name: Scope
  href: api/Injecter.Avalonia.InjectedWindow.html#Injecter_Avalonia_InjectedWindow_Scope
  commentId: P:Injecter.Avalonia.InjectedWindow.Scope
  fullName: Injecter.Avalonia.InjectedWindow.Scope
  nameWithType: InjectedWindow.Scope
- uid: Injecter.Avalonia.InjectedWindow.Scope*
  name: Scope
  href: api/Injecter.Avalonia.InjectedWindow.html#Injecter_Avalonia_InjectedWindow_Scope_
  commentId: Overload:Injecter.Avalonia.InjectedWindow.Scope
  isSpec: "True"
  fullName: Injecter.Avalonia.InjectedWindow.Scope
  nameWithType: InjectedWindow.Scope
- uid: Injecter.Avalonia.InjectedWindow`1
  name: InjectedWindow<TViewModel>
  href: api/Injecter.Avalonia.InjectedWindow-1.html
  commentId: T:Injecter.Avalonia.InjectedWindow`1
  name.vb: InjectedWindow(Of TViewModel)
  fullName: Injecter.Avalonia.InjectedWindow<TViewModel>
  fullName.vb: Injecter.Avalonia.InjectedWindow(Of TViewModel)
  nameWithType: InjectedWindow<TViewModel>
  nameWithType.vb: InjectedWindow(Of TViewModel)
- uid: Injecter.Avalonia.InjectedWindow`1.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)
  name: OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs)
  href: api/Injecter.Avalonia.InjectedWindow-1.html#Injecter_Avalonia_InjectedWindow_1_OnAttachedToLogicalTree_Avalonia_LogicalTree_LogicalTreeAttachmentEventArgs_
  commentId: M:Injecter.Avalonia.InjectedWindow`1.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)
  fullName: Injecter.Avalonia.InjectedWindow<TViewModel>.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)
  fullName.vb: Injecter.Avalonia.InjectedWindow(Of TViewModel).OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)
  nameWithType: InjectedWindow<TViewModel>.OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs)
  nameWithType.vb: InjectedWindow(Of TViewModel).OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs)
- uid: Injecter.Avalonia.InjectedWindow`1.OnAttachedToLogicalTree*
  name: OnAttachedToLogicalTree
  href: api/Injecter.Avalonia.InjectedWindow-1.html#Injecter_Avalonia_InjectedWindow_1_OnAttachedToLogicalTree_
  commentId: Overload:Injecter.Avalonia.InjectedWindow`1.OnAttachedToLogicalTree
  isSpec: "True"
  fullName: Injecter.Avalonia.InjectedWindow<TViewModel>.OnAttachedToLogicalTree
  fullName.vb: Injecter.Avalonia.InjectedWindow(Of TViewModel).OnAttachedToLogicalTree
  nameWithType: InjectedWindow<TViewModel>.OnAttachedToLogicalTree
  nameWithType.vb: InjectedWindow(Of TViewModel).OnAttachedToLogicalTree
- uid: Injecter.Avalonia.InjectedWindow`1.ViewModel
  name: ViewModel
  href: api/Injecter.Avalonia.InjectedWindow-1.html#Injecter_Avalonia_InjectedWindow_1_ViewModel
  commentId: P:Injecter.Avalonia.InjectedWindow`1.ViewModel
  fullName: Injecter.Avalonia.InjectedWindow<TViewModel>.ViewModel
  fullName.vb: Injecter.Avalonia.InjectedWindow(Of TViewModel).ViewModel
  nameWithType: InjectedWindow<TViewModel>.ViewModel
  nameWithType.vb: InjectedWindow(Of TViewModel).ViewModel
- uid: Injecter.Avalonia.InjectedWindow`1.ViewModel*
  name: ViewModel
  href: api/Injecter.Avalonia.InjectedWindow-1.html#Injecter_Avalonia_InjectedWindow_1_ViewModel_
  commentId: Overload:Injecter.Avalonia.InjectedWindow`1.ViewModel
  isSpec: "True"
  fullName: Injecter.Avalonia.InjectedWindow<TViewModel>.ViewModel
  fullName.vb: Injecter.Avalonia.InjectedWindow(Of TViewModel).ViewModel
  nameWithType: InjectedWindow<TViewModel>.ViewModel
  nameWithType.vb: InjectedWindow(Of TViewModel).ViewModel
- uid: Injecter.CompositionRoot
  name: CompositionRoot
  href: api/Injecter.CompositionRoot.html
  commentId: T:Injecter.CompositionRoot
  fullName: Injecter.CompositionRoot
  nameWithType: CompositionRoot
- uid: Injecter.CompositionRoot.ServiceProvider
  name: ServiceProvider
  href: api/Injecter.CompositionRoot.html#Injecter_CompositionRoot_ServiceProvider
  commentId: P:Injecter.CompositionRoot.ServiceProvider
  fullName: Injecter.CompositionRoot.ServiceProvider
  nameWithType: CompositionRoot.ServiceProvider
- uid: Injecter.CompositionRoot.ServiceProvider*
  name: ServiceProvider
  href: api/Injecter.CompositionRoot.html#Injecter_CompositionRoot_ServiceProvider_
  commentId: Overload:Injecter.CompositionRoot.ServiceProvider
  isSpec: "True"
  fullName: Injecter.CompositionRoot.ServiceProvider
  nameWithType: CompositionRoot.ServiceProvider
- uid: Injecter.Hosting.Unity
  name: Injecter.Hosting.Unity
  href: api/Injecter.Hosting.Unity.html
  commentId: N:Injecter.Hosting.Unity
  fullName: Injecter.Hosting.Unity
  nameWithType: Injecter.Hosting.Unity
- uid: Injecter.Hosting.Unity.UnityHostBuilderExtensions
  name: UnityHostBuilderExtensions
  href: api/Injecter.Hosting.Unity.UnityHostBuilderExtensions.html
  commentId: T:Injecter.Hosting.Unity.UnityHostBuilderExtensions
  fullName: Injecter.Hosting.Unity.UnityHostBuilderExtensions
  nameWithType: UnityHostBuilderExtensions
- uid: Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnity(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Injecter.Hosting.Unity.UnityLifeTimeOptions},System.Boolean,System.Boolean,UnityEngine.TextAsset[])
  name: UseUnity(IHostBuilder, Action<UnityLifeTimeOptions>, Boolean, Boolean, TextAsset[])
  href: api/Injecter.Hosting.Unity.UnityHostBuilderExtensions.html#Injecter_Hosting_Unity_UnityHostBuilderExtensions_UseUnity_Microsoft_Extensions_Hosting_IHostBuilder_System_Action_Injecter_Hosting_Unity_UnityLifeTimeOptions__System_Boolean_System_Boolean_UnityEngine_TextAsset___
  commentId: M:Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnity(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Injecter.Hosting.Unity.UnityLifeTimeOptions},System.Boolean,System.Boolean,UnityEngine.TextAsset[])
  name.vb: UseUnity(IHostBuilder, Action(Of UnityLifeTimeOptions), Boolean, Boolean, TextAsset())
  fullName: Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnity(Microsoft.Extensions.Hosting.IHostBuilder, System.Action<Injecter.Hosting.Unity.UnityLifeTimeOptions>, System.Boolean, System.Boolean, UnityEngine.TextAsset[])
  fullName.vb: Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnity(Microsoft.Extensions.Hosting.IHostBuilder, System.Action(Of Injecter.Hosting.Unity.UnityLifeTimeOptions), System.Boolean, System.Boolean, UnityEngine.TextAsset())
  nameWithType: UnityHostBuilderExtensions.UseUnity(IHostBuilder, Action<UnityLifeTimeOptions>, Boolean, Boolean, TextAsset[])
  nameWithType.vb: UnityHostBuilderExtensions.UseUnity(IHostBuilder, Action(Of UnityLifeTimeOptions), Boolean, Boolean, TextAsset())
- uid: Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnity*
  name: UseUnity
  href: api/Injecter.Hosting.Unity.UnityHostBuilderExtensions.html#Injecter_Hosting_Unity_UnityHostBuilderExtensions_UseUnity_
  commentId: Overload:Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnity
  isSpec: "True"
  fullName: Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnity
  nameWithType: UnityHostBuilderExtensions.UseUnity
- uid: Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnityLifetime(Microsoft.Extensions.Hosting.IHostBuilder)
  name: UseUnityLifetime(IHostBuilder)
  href: api/Injecter.Hosting.Unity.UnityHostBuilderExtensions.html#Injecter_Hosting_Unity_UnityHostBuilderExtensions_UseUnityLifetime_Microsoft_Extensions_Hosting_IHostBuilder_
  commentId: M:Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnityLifetime(Microsoft.Extensions.Hosting.IHostBuilder)
  fullName: Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnityLifetime(Microsoft.Extensions.Hosting.IHostBuilder)
  nameWithType: UnityHostBuilderExtensions.UseUnityLifetime(IHostBuilder)
- uid: Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnityLifetime(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Injecter.Hosting.Unity.UnityLifeTimeOptions})
  name: UseUnityLifetime(IHostBuilder, Action<UnityLifeTimeOptions>)
  href: api/Injecter.Hosting.Unity.UnityHostBuilderExtensions.html#Injecter_Hosting_Unity_UnityHostBuilderExtensions_UseUnityLifetime_Microsoft_Extensions_Hosting_IHostBuilder_System_Action_Injecter_Hosting_Unity_UnityLifeTimeOptions__
  commentId: M:Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnityLifetime(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Injecter.Hosting.Unity.UnityLifeTimeOptions})
  name.vb: UseUnityLifetime(IHostBuilder, Action(Of UnityLifeTimeOptions))
  fullName: Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnityLifetime(Microsoft.Extensions.Hosting.IHostBuilder, System.Action<Injecter.Hosting.Unity.UnityLifeTimeOptions>)
  fullName.vb: Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnityLifetime(Microsoft.Extensions.Hosting.IHostBuilder, System.Action(Of Injecter.Hosting.Unity.UnityLifeTimeOptions))
  nameWithType: UnityHostBuilderExtensions.UseUnityLifetime(IHostBuilder, Action<UnityLifeTimeOptions>)
  nameWithType.vb: UnityHostBuilderExtensions.UseUnityLifetime(IHostBuilder, Action(Of UnityLifeTimeOptions))
- uid: Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnityLifetime*
  name: UseUnityLifetime
  href: api/Injecter.Hosting.Unity.UnityHostBuilderExtensions.html#Injecter_Hosting_Unity_UnityHostBuilderExtensions_UseUnityLifetime_
  commentId: Overload:Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnityLifetime
  isSpec: "True"
  fullName: Injecter.Hosting.Unity.UnityHostBuilderExtensions.UseUnityLifetime
  nameWithType: UnityHostBuilderExtensions.UseUnityLifetime
- uid: Injecter.Hosting.Unity.UnityLifetime
  name: UnityLifetime
  href: api/Injecter.Hosting.Unity.UnityLifetime.html
  commentId: T:Injecter.Hosting.Unity.UnityLifetime
  fullName: Injecter.Hosting.Unity.UnityLifetime
  nameWithType: UnityLifetime
- uid: Injecter.Hosting.Unity.UnityLifetime.#ctor(Injecter.IScopeStore,Microsoft.Extensions.Options.IOptions{Injecter.Hosting.Unity.UnityLifeTimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.HostOptions})
  name: UnityLifetime(IScopeStore, IOptions<UnityLifeTimeOptions>, IHostEnvironment, IHostApplicationLifetime, IOptions<HostOptions>)
  href: api/Injecter.Hosting.Unity.UnityLifetime.html#Injecter_Hosting_Unity_UnityLifetime__ctor_Injecter_IScopeStore_Microsoft_Extensions_Options_IOptions_Injecter_Hosting_Unity_UnityLifeTimeOptions__Microsoft_Extensions_Hosting_IHostEnvironment_Microsoft_Extensions_Hosting_IHostApplicationLifetime_Microsoft_Extensions_Options_IOptions_Microsoft_Extensions_Hosting_HostOptions__
  commentId: M:Injecter.Hosting.Unity.UnityLifetime.#ctor(Injecter.IScopeStore,Microsoft.Extensions.Options.IOptions{Injecter.Hosting.Unity.UnityLifeTimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.HostOptions})
  name.vb: UnityLifetime(IScopeStore, IOptions(Of UnityLifeTimeOptions), IHostEnvironment, IHostApplicationLifetime, IOptions(Of HostOptions))
  fullName: Injecter.Hosting.Unity.UnityLifetime.UnityLifetime(Injecter.IScopeStore, Microsoft.Extensions.Options.IOptions<Injecter.Hosting.Unity.UnityLifeTimeOptions>, Microsoft.Extensions.Hosting.IHostEnvironment, Microsoft.Extensions.Hosting.IHostApplicationLifetime, Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Hosting.HostOptions>)
  fullName.vb: Injecter.Hosting.Unity.UnityLifetime.UnityLifetime(Injecter.IScopeStore, Microsoft.Extensions.Options.IOptions(Of Injecter.Hosting.Unity.UnityLifeTimeOptions), Microsoft.Extensions.Hosting.IHostEnvironment, Microsoft.Extensions.Hosting.IHostApplicationLifetime, Microsoft.Extensions.Options.IOptions(Of Microsoft.Extensions.Hosting.HostOptions))
  nameWithType: UnityLifetime.UnityLifetime(IScopeStore, IOptions<UnityLifeTimeOptions>, IHostEnvironment, IHostApplicationLifetime, IOptions<HostOptions>)
  nameWithType.vb: UnityLifetime.UnityLifetime(IScopeStore, IOptions(Of UnityLifeTimeOptions), IHostEnvironment, IHostApplicationLifetime, IOptions(Of HostOptions))
- uid: Injecter.Hosting.Unity.UnityLifetime.#ctor(Injecter.IScopeStore,Microsoft.Extensions.Options.IOptions{Injecter.Hosting.Unity.UnityLifeTimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.HostOptions},Microsoft.Extensions.Logging.ILoggerFactory)
  name: UnityLifetime(IScopeStore, IOptions<UnityLifeTimeOptions>, IHostEnvironment, IHostApplicationLifetime, IOptions<HostOptions>, ILoggerFactory)
  href: api/Injecter.Hosting.Unity.UnityLifetime.html#Injecter_Hosting_Unity_UnityLifetime__ctor_Injecter_IScopeStore_Microsoft_Extensions_Options_IOptions_Injecter_Hosting_Unity_UnityLifeTimeOptions__Microsoft_Extensions_Hosting_IHostEnvironment_Microsoft_Extensions_Hosting_IHostApplicationLifetime_Microsoft_Extensions_Options_IOptions_Microsoft_Extensions_Hosting_HostOptions__Microsoft_Extensions_Logging_ILoggerFactory_
  commentId: M:Injecter.Hosting.Unity.UnityLifetime.#ctor(Injecter.IScopeStore,Microsoft.Extensions.Options.IOptions{Injecter.Hosting.Unity.UnityLifeTimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.HostOptions},Microsoft.Extensions.Logging.ILoggerFactory)
  name.vb: UnityLifetime(IScopeStore, IOptions(Of UnityLifeTimeOptions), IHostEnvironment, IHostApplicationLifetime, IOptions(Of HostOptions), ILoggerFactory)
  fullName: Injecter.Hosting.Unity.UnityLifetime.UnityLifetime(Injecter.IScopeStore, Microsoft.Extensions.Options.IOptions<Injecter.Hosting.Unity.UnityLifeTimeOptions>, Microsoft.Extensions.Hosting.IHostEnvironment, Microsoft.Extensions.Hosting.IHostApplicationLifetime, Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Hosting.HostOptions>, Microsoft.Extensions.Logging.ILoggerFactory)
  fullName.vb: Injecter.Hosting.Unity.UnityLifetime.UnityLifetime(Injecter.IScopeStore, Microsoft.Extensions.Options.IOptions(Of Injecter.Hosting.Unity.UnityLifeTimeOptions), Microsoft.Extensions.Hosting.IHostEnvironment, Microsoft.Extensions.Hosting.IHostApplicationLifetime, Microsoft.Extensions.Options.IOptions(Of Microsoft.Extensions.Hosting.HostOptions), Microsoft.Extensions.Logging.ILoggerFactory)
  nameWithType: UnityLifetime.UnityLifetime(IScopeStore, IOptions<UnityLifeTimeOptions>, IHostEnvironment, IHostApplicationLifetime, IOptions<HostOptions>, ILoggerFactory)
  nameWithType.vb: UnityLifetime.UnityLifetime(IScopeStore, IOptions(Of UnityLifeTimeOptions), IHostEnvironment, IHostApplicationLifetime, IOptions(Of HostOptions), ILoggerFactory)
- uid: Injecter.Hosting.Unity.UnityLifetime.#ctor*
  name: UnityLifetime
  href: api/Injecter.Hosting.Unity.UnityLifetime.html#Injecter_Hosting_Unity_UnityLifetime__ctor_
  commentId: Overload:Injecter.Hosting.Unity.UnityLifetime.#ctor
  isSpec: "True"
  fullName: Injecter.Hosting.Unity.UnityLifetime.UnityLifetime
  nameWithType: UnityLifetime.UnityLifetime
- uid: Injecter.Hosting.Unity.UnityLifetime.Dispose
  name: Dispose()
  href: api/Injecter.Hosting.Unity.UnityLifetime.html#Injecter_Hosting_Unity_UnityLifetime_Dispose
  commentId: M:Injecter.Hosting.Unity.UnityLifetime.Dispose
  fullName: Injecter.Hosting.Unity.UnityLifetime.Dispose()
  nameWithType: UnityLifetime.Dispose()
- uid: Injecter.Hosting.Unity.UnityLifetime.Dispose*
  name: Dispose
  href: api/Injecter.Hosting.Unity.UnityLifetime.html#Injecter_Hosting_Unity_UnityLifetime_Dispose_
  commentId: Overload:Injecter.Hosting.Unity.UnityLifetime.Dispose
  isSpec: "True"
  fullName: Injecter.Hosting.Unity.UnityLifetime.Dispose
  nameWithType: UnityLifetime.Dispose
- uid: Injecter.Hosting.Unity.UnityLifetime.StopAsync(System.Threading.CancellationToken)
  name: StopAsync(CancellationToken)
  href: api/Injecter.Hosting.Unity.UnityLifetime.html#Injecter_Hosting_Unity_UnityLifetime_StopAsync_System_Threading_CancellationToken_
  commentId: M:Injecter.Hosting.Unity.UnityLifetime.StopAsync(System.Threading.CancellationToken)
  fullName: Injecter.Hosting.Unity.UnityLifetime.StopAsync(System.Threading.CancellationToken)
  nameWithType: UnityLifetime.StopAsync(CancellationToken)
- uid: Injecter.Hosting.Unity.UnityLifetime.StopAsync*
  name: StopAsync
  href: api/Injecter.Hosting.Unity.UnityLifetime.html#Injecter_Hosting_Unity_UnityLifetime_StopAsync_
  commentId: Overload:Injecter.Hosting.Unity.UnityLifetime.StopAsync
  isSpec: "True"
  fullName: Injecter.Hosting.Unity.UnityLifetime.StopAsync
  nameWithType: UnityLifetime.StopAsync
- uid: Injecter.Hosting.Unity.UnityLifetime.WaitForStartAsync(System.Threading.CancellationToken)
  name: WaitForStartAsync(CancellationToken)
  href: api/Injecter.Hosting.Unity.UnityLifetime.html#Injecter_Hosting_Unity_UnityLifetime_WaitForStartAsync_System_Threading_CancellationToken_
  commentId: M:Injecter.Hosting.Unity.UnityLifetime.WaitForStartAsync(System.Threading.CancellationToken)
  fullName: Injecter.Hosting.Unity.UnityLifetime.WaitForStartAsync(System.Threading.CancellationToken)
  nameWithType: UnityLifetime.WaitForStartAsync(CancellationToken)
- uid: Injecter.Hosting.Unity.UnityLifetime.WaitForStartAsync*
  name: WaitForStartAsync
  href: api/Injecter.Hosting.Unity.UnityLifetime.html#Injecter_Hosting_Unity_UnityLifetime_WaitForStartAsync_
  commentId: Overload:Injecter.Hosting.Unity.UnityLifetime.WaitForStartAsync
  isSpec: "True"
  fullName: Injecter.Hosting.Unity.UnityLifetime.WaitForStartAsync
  nameWithType: UnityLifetime.WaitForStartAsync
- uid: Injecter.Hosting.Unity.UnityLifeTimeOptions
  name: UnityLifeTimeOptions
  href: api/Injecter.Hosting.Unity.UnityLifeTimeOptions.html
  commentId: T:Injecter.Hosting.Unity.UnityLifeTimeOptions
  fullName: Injecter.Hosting.Unity.UnityLifeTimeOptions
  nameWithType: UnityLifeTimeOptions
- uid: Injecter.Hosting.Unity.UnityLifeTimeOptions.SuppressStatusMessages
  name: SuppressStatusMessages
  href: api/Injecter.Hosting.Unity.UnityLifeTimeOptions.html#Injecter_Hosting_Unity_UnityLifeTimeOptions_SuppressStatusMessages
  commentId: P:Injecter.Hosting.Unity.UnityLifeTimeOptions.SuppressStatusMessages
  fullName: Injecter.Hosting.Unity.UnityLifeTimeOptions.SuppressStatusMessages
  nameWithType: UnityLifeTimeOptions.SuppressStatusMessages
- uid: Injecter.Hosting.Unity.UnityLifeTimeOptions.SuppressStatusMessages*
  name: SuppressStatusMessages
  href: api/Injecter.Hosting.Unity.UnityLifeTimeOptions.html#Injecter_Hosting_Unity_UnityLifeTimeOptions_SuppressStatusMessages_
  commentId: Overload:Injecter.Hosting.Unity.UnityLifeTimeOptions.SuppressStatusMessages
  isSpec: "True"
  fullName: Injecter.Hosting.Unity.UnityLifeTimeOptions.SuppressStatusMessages
  nameWithType: UnityLifeTimeOptions.SuppressStatusMessages
- uid: Injecter.Hosting.Wpf
  name: Injecter.Hosting.Wpf
  href: api/Injecter.Hosting.Wpf.html
  commentId: N:Injecter.Hosting.Wpf
  fullName: Injecter.Hosting.Wpf
  nameWithType: Injecter.Hosting.Wpf
- uid: Injecter.Hosting.Wpf.WpfHostBuilderExtensions
  name: WpfHostBuilderExtensions
  href: api/Injecter.Hosting.Wpf.WpfHostBuilderExtensions.html
  commentId: T:Injecter.Hosting.Wpf.WpfHostBuilderExtensions
  fullName: Injecter.Hosting.Wpf.WpfHostBuilderExtensions
  nameWithType: WpfHostBuilderExtensions
- uid: Injecter.Hosting.Wpf.WpfHostBuilderExtensions.UseWpfLifetime(Microsoft.Extensions.Hosting.IHostBuilder)
  name: UseWpfLifetime(IHostBuilder)
  href: api/Injecter.Hosting.Wpf.WpfHostBuilderExtensions.html#Injecter_Hosting_Wpf_WpfHostBuilderExtensions_UseWpfLifetime_Microsoft_Extensions_Hosting_IHostBuilder_
  commentId: M:Injecter.Hosting.Wpf.WpfHostBuilderExtensions.UseWpfLifetime(Microsoft.Extensions.Hosting.IHostBuilder)
  fullName: Injecter.Hosting.Wpf.WpfHostBuilderExtensions.UseWpfLifetime(Microsoft.Extensions.Hosting.IHostBuilder)
  nameWithType: WpfHostBuilderExtensions.UseWpfLifetime(IHostBuilder)
- uid: Injecter.Hosting.Wpf.WpfHostBuilderExtensions.UseWpfLifetime(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Injecter.Hosting.Wpf.WpfLifeTimeOptions})
  name: UseWpfLifetime(IHostBuilder, Action<WpfLifeTimeOptions>)
  href: api/Injecter.Hosting.Wpf.WpfHostBuilderExtensions.html#Injecter_Hosting_Wpf_WpfHostBuilderExtensions_UseWpfLifetime_Microsoft_Extensions_Hosting_IHostBuilder_System_Action_Injecter_Hosting_Wpf_WpfLifeTimeOptions__
  commentId: M:Injecter.Hosting.Wpf.WpfHostBuilderExtensions.UseWpfLifetime(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Injecter.Hosting.Wpf.WpfLifeTimeOptions})
  name.vb: UseWpfLifetime(IHostBuilder, Action(Of WpfLifeTimeOptions))
  fullName: Injecter.Hosting.Wpf.WpfHostBuilderExtensions.UseWpfLifetime(Microsoft.Extensions.Hosting.IHostBuilder, System.Action<Injecter.Hosting.Wpf.WpfLifeTimeOptions>)
  fullName.vb: Injecter.Hosting.Wpf.WpfHostBuilderExtensions.UseWpfLifetime(Microsoft.Extensions.Hosting.IHostBuilder, System.Action(Of Injecter.Hosting.Wpf.WpfLifeTimeOptions))
  nameWithType: WpfHostBuilderExtensions.UseWpfLifetime(IHostBuilder, Action<WpfLifeTimeOptions>)
  nameWithType.vb: WpfHostBuilderExtensions.UseWpfLifetime(IHostBuilder, Action(Of WpfLifeTimeOptions))
- uid: Injecter.Hosting.Wpf.WpfHostBuilderExtensions.UseWpfLifetime*
  name: UseWpfLifetime
  href: api/Injecter.Hosting.Wpf.WpfHostBuilderExtensions.html#Injecter_Hosting_Wpf_WpfHostBuilderExtensions_UseWpfLifetime_
  commentId: Overload:Injecter.Hosting.Wpf.WpfHostBuilderExtensions.UseWpfLifetime
  isSpec: "True"
  fullName: Injecter.Hosting.Wpf.WpfHostBuilderExtensions.UseWpfLifetime
  nameWithType: WpfHostBuilderExtensions.UseWpfLifetime
- uid: Injecter.Hosting.Wpf.WpfLifetime
  name: WpfLifetime
  href: api/Injecter.Hosting.Wpf.WpfLifetime.html
  commentId: T:Injecter.Hosting.Wpf.WpfLifetime
  fullName: Injecter.Hosting.Wpf.WpfLifetime
  nameWithType: WpfLifetime
- uid: Injecter.Hosting.Wpf.WpfLifetime.#ctor(Microsoft.Extensions.Options.IOptions{Injecter.Hosting.Wpf.WpfLifeTimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.HostOptions})
  name: WpfLifetime(IOptions<WpfLifeTimeOptions>, IHostEnvironment, IHostApplicationLifetime, IOptions<HostOptions>)
  href: api/Injecter.Hosting.Wpf.WpfLifetime.html#Injecter_Hosting_Wpf_WpfLifetime__ctor_Microsoft_Extensions_Options_IOptions_Injecter_Hosting_Wpf_WpfLifeTimeOptions__Microsoft_Extensions_Hosting_IHostEnvironment_Microsoft_Extensions_Hosting_IHostApplicationLifetime_Microsoft_Extensions_Options_IOptions_Microsoft_Extensions_Hosting_HostOptions__
  commentId: M:Injecter.Hosting.Wpf.WpfLifetime.#ctor(Microsoft.Extensions.Options.IOptions{Injecter.Hosting.Wpf.WpfLifeTimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.HostOptions})
  name.vb: WpfLifetime(IOptions(Of WpfLifeTimeOptions), IHostEnvironment, IHostApplicationLifetime, IOptions(Of HostOptions))
  fullName: Injecter.Hosting.Wpf.WpfLifetime.WpfLifetime(Microsoft.Extensions.Options.IOptions<Injecter.Hosting.Wpf.WpfLifeTimeOptions>, Microsoft.Extensions.Hosting.IHostEnvironment, Microsoft.Extensions.Hosting.IHostApplicationLifetime, Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Hosting.HostOptions>)
  fullName.vb: Injecter.Hosting.Wpf.WpfLifetime.WpfLifetime(Microsoft.Extensions.Options.IOptions(Of Injecter.Hosting.Wpf.WpfLifeTimeOptions), Microsoft.Extensions.Hosting.IHostEnvironment, Microsoft.Extensions.Hosting.IHostApplicationLifetime, Microsoft.Extensions.Options.IOptions(Of Microsoft.Extensions.Hosting.HostOptions))
  nameWithType: WpfLifetime.WpfLifetime(IOptions<WpfLifeTimeOptions>, IHostEnvironment, IHostApplicationLifetime, IOptions<HostOptions>)
  nameWithType.vb: WpfLifetime.WpfLifetime(IOptions(Of WpfLifeTimeOptions), IHostEnvironment, IHostApplicationLifetime, IOptions(Of HostOptions))
- uid: Injecter.Hosting.Wpf.WpfLifetime.#ctor(Microsoft.Extensions.Options.IOptions{Injecter.Hosting.Wpf.WpfLifeTimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.HostOptions},Microsoft.Extensions.Logging.ILoggerFactory)
  name: WpfLifetime(IOptions<WpfLifeTimeOptions>, IHostEnvironment, IHostApplicationLifetime, IOptions<HostOptions>, ILoggerFactory)
  href: api/Injecter.Hosting.Wpf.WpfLifetime.html#Injecter_Hosting_Wpf_WpfLifetime__ctor_Microsoft_Extensions_Options_IOptions_Injecter_Hosting_Wpf_WpfLifeTimeOptions__Microsoft_Extensions_Hosting_IHostEnvironment_Microsoft_Extensions_Hosting_IHostApplicationLifetime_Microsoft_Extensions_Options_IOptions_Microsoft_Extensions_Hosting_HostOptions__Microsoft_Extensions_Logging_ILoggerFactory_
  commentId: M:Injecter.Hosting.Wpf.WpfLifetime.#ctor(Microsoft.Extensions.Options.IOptions{Injecter.Hosting.Wpf.WpfLifeTimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.HostOptions},Microsoft.Extensions.Logging.ILoggerFactory)
  name.vb: WpfLifetime(IOptions(Of WpfLifeTimeOptions), IHostEnvironment, IHostApplicationLifetime, IOptions(Of HostOptions), ILoggerFactory)
  fullName: Injecter.Hosting.Wpf.WpfLifetime.WpfLifetime(Microsoft.Extensions.Options.IOptions<Injecter.Hosting.Wpf.WpfLifeTimeOptions>, Microsoft.Extensions.Hosting.IHostEnvironment, Microsoft.Extensions.Hosting.IHostApplicationLifetime, Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Hosting.HostOptions>, Microsoft.Extensions.Logging.ILoggerFactory)
  fullName.vb: Injecter.Hosting.Wpf.WpfLifetime.WpfLifetime(Microsoft.Extensions.Options.IOptions(Of Injecter.Hosting.Wpf.WpfLifeTimeOptions), Microsoft.Extensions.Hosting.IHostEnvironment, Microsoft.Extensions.Hosting.IHostApplicationLifetime, Microsoft.Extensions.Options.IOptions(Of Microsoft.Extensions.Hosting.HostOptions), Microsoft.Extensions.Logging.ILoggerFactory)
  nameWithType: WpfLifetime.WpfLifetime(IOptions<WpfLifeTimeOptions>, IHostEnvironment, IHostApplicationLifetime, IOptions<HostOptions>, ILoggerFactory)
  nameWithType.vb: WpfLifetime.WpfLifetime(IOptions(Of WpfLifeTimeOptions), IHostEnvironment, IHostApplicationLifetime, IOptions(Of HostOptions), ILoggerFactory)
- uid: Injecter.Hosting.Wpf.WpfLifetime.#ctor*
  name: WpfLifetime
  href: api/Injecter.Hosting.Wpf.WpfLifetime.html#Injecter_Hosting_Wpf_WpfLifetime__ctor_
  commentId: Overload:Injecter.Hosting.Wpf.WpfLifetime.#ctor
  isSpec: "True"
  fullName: Injecter.Hosting.Wpf.WpfLifetime.WpfLifetime
  nameWithType: WpfLifetime.WpfLifetime
- uid: Injecter.Hosting.Wpf.WpfLifetime.Dispose
  name: Dispose()
  href: api/Injecter.Hosting.Wpf.WpfLifetime.html#Injecter_Hosting_Wpf_WpfLifetime_Dispose
  commentId: M:Injecter.Hosting.Wpf.WpfLifetime.Dispose
  fullName: Injecter.Hosting.Wpf.WpfLifetime.Dispose()
  nameWithType: WpfLifetime.Dispose()
- uid: Injecter.Hosting.Wpf.WpfLifetime.Dispose*
  name: Dispose
  href: api/Injecter.Hosting.Wpf.WpfLifetime.html#Injecter_Hosting_Wpf_WpfLifetime_Dispose_
  commentId: Overload:Injecter.Hosting.Wpf.WpfLifetime.Dispose
  isSpec: "True"
  fullName: Injecter.Hosting.Wpf.WpfLifetime.Dispose
  nameWithType: WpfLifetime.Dispose
- uid: Injecter.Hosting.Wpf.WpfLifetime.StopAsync(System.Threading.CancellationToken)
  name: StopAsync(CancellationToken)
  href: api/Injecter.Hosting.Wpf.WpfLifetime.html#Injecter_Hosting_Wpf_WpfLifetime_StopAsync_System_Threading_CancellationToken_
  commentId: M:Injecter.Hosting.Wpf.WpfLifetime.StopAsync(System.Threading.CancellationToken)
  fullName: Injecter.Hosting.Wpf.WpfLifetime.StopAsync(System.Threading.CancellationToken)
  nameWithType: WpfLifetime.StopAsync(CancellationToken)
- uid: Injecter.Hosting.Wpf.WpfLifetime.StopAsync*
  name: StopAsync
  href: api/Injecter.Hosting.Wpf.WpfLifetime.html#Injecter_Hosting_Wpf_WpfLifetime_StopAsync_
  commentId: Overload:Injecter.Hosting.Wpf.WpfLifetime.StopAsync
  isSpec: "True"
  fullName: Injecter.Hosting.Wpf.WpfLifetime.StopAsync
  nameWithType: WpfLifetime.StopAsync
- uid: Injecter.Hosting.Wpf.WpfLifetime.WaitForStartAsync(System.Threading.CancellationToken)
  name: WaitForStartAsync(CancellationToken)
  href: api/Injecter.Hosting.Wpf.WpfLifetime.html#Injecter_Hosting_Wpf_WpfLifetime_WaitForStartAsync_System_Threading_CancellationToken_
  commentId: M:Injecter.Hosting.Wpf.WpfLifetime.WaitForStartAsync(System.Threading.CancellationToken)
  fullName: Injecter.Hosting.Wpf.WpfLifetime.WaitForStartAsync(System.Threading.CancellationToken)
  nameWithType: WpfLifetime.WaitForStartAsync(CancellationToken)
- uid: Injecter.Hosting.Wpf.WpfLifetime.WaitForStartAsync*
  name: WaitForStartAsync
  href: api/Injecter.Hosting.Wpf.WpfLifetime.html#Injecter_Hosting_Wpf_WpfLifetime_WaitForStartAsync_
  commentId: Overload:Injecter.Hosting.Wpf.WpfLifetime.WaitForStartAsync
  isSpec: "True"
  fullName: Injecter.Hosting.Wpf.WpfLifetime.WaitForStartAsync
  nameWithType: WpfLifetime.WaitForStartAsync
- uid: Injecter.Hosting.Wpf.WpfLifeTimeOptions
  name: WpfLifeTimeOptions
  href: api/Injecter.Hosting.Wpf.WpfLifeTimeOptions.html
  commentId: T:Injecter.Hosting.Wpf.WpfLifeTimeOptions
  fullName: Injecter.Hosting.Wpf.WpfLifeTimeOptions
  nameWithType: WpfLifeTimeOptions
- uid: Injecter.Hosting.Wpf.WpfLifeTimeOptions.SuppressStatusMessages
  name: SuppressStatusMessages
  href: api/Injecter.Hosting.Wpf.WpfLifeTimeOptions.html#Injecter_Hosting_Wpf_WpfLifeTimeOptions_SuppressStatusMessages
  commentId: P:Injecter.Hosting.Wpf.WpfLifeTimeOptions.SuppressStatusMessages
  fullName: Injecter.Hosting.Wpf.WpfLifeTimeOptions.SuppressStatusMessages
  nameWithType: WpfLifeTimeOptions.SuppressStatusMessages
- uid: Injecter.Hosting.Wpf.WpfLifeTimeOptions.SuppressStatusMessages*
  name: SuppressStatusMessages
  href: api/Injecter.Hosting.Wpf.WpfLifeTimeOptions.html#Injecter_Hosting_Wpf_WpfLifeTimeOptions_SuppressStatusMessages_
  commentId: Overload:Injecter.Hosting.Wpf.WpfLifeTimeOptions.SuppressStatusMessages
  isSpec: "True"
  fullName: Injecter.Hosting.Wpf.WpfLifeTimeOptions.SuppressStatusMessages
  nameWithType: WpfLifeTimeOptions.SuppressStatusMessages
- uid: Injecter.IInjecter
  name: IInjecter
  href: api/Injecter.IInjecter.html
  commentId: T:Injecter.IInjecter
  fullName: Injecter.IInjecter
  nameWithType: IInjecter
- uid: Injecter.IInjecter.InjectIntoType(System.Object,System.Boolean)
  name: InjectIntoType(Object, Boolean)
  href: api/Injecter.IInjecter.html#Injecter_IInjecter_InjectIntoType_System_Object_System_Boolean_
  commentId: M:Injecter.IInjecter.InjectIntoType(System.Object,System.Boolean)
  fullName: Injecter.IInjecter.InjectIntoType(System.Object, System.Boolean)
  nameWithType: IInjecter.InjectIntoType(Object, Boolean)
- uid: Injecter.IInjecter.InjectIntoType*
  name: InjectIntoType
  href: api/Injecter.IInjecter.html#Injecter_IInjecter_InjectIntoType_
  commentId: Overload:Injecter.IInjecter.InjectIntoType
  isSpec: "True"
  fullName: Injecter.IInjecter.InjectIntoType
  nameWithType: IInjecter.InjectIntoType
- uid: Injecter.InjectAttribute
  name: InjectAttribute
  href: api/Injecter.InjectAttribute.html
  commentId: T:Injecter.InjectAttribute
  fullName: Injecter.InjectAttribute
  nameWithType: InjectAttribute
- uid: Injecter.Injecter
  name: Injecter
  href: api/Injecter.Injecter.html
  commentId: T:Injecter.Injecter
  fullName: Injecter.Injecter
  nameWithType: Injecter
- uid: Injecter.Injecter.#ctor(System.IServiceProvider,Injecter.InjecterOptions,Injecter.IScopeStore)
  name: Injecter(IServiceProvider, InjecterOptions, IScopeStore)
  href: api/Injecter.Injecter.html#Injecter_Injecter__ctor_System_IServiceProvider_Injecter_InjecterOptions_Injecter_IScopeStore_
  commentId: M:Injecter.Injecter.#ctor(System.IServiceProvider,Injecter.InjecterOptions,Injecter.IScopeStore)
  fullName: Injecter.Injecter.Injecter(System.IServiceProvider, Injecter.InjecterOptions, Injecter.IScopeStore)
  nameWithType: Injecter.Injecter(IServiceProvider, InjecterOptions, IScopeStore)
- uid: Injecter.Injecter.#ctor*
  name: Injecter
  href: api/Injecter.Injecter.html#Injecter_Injecter__ctor_
  commentId: Overload:Injecter.Injecter.#ctor
  isSpec: "True"
  fullName: Injecter.Injecter.Injecter
  nameWithType: Injecter.Injecter
- uid: Injecter.Injecter.InjectIntoType(System.Object,System.Boolean)
  name: InjectIntoType(Object, Boolean)
  href: api/Injecter.Injecter.html#Injecter_Injecter_InjectIntoType_System_Object_System_Boolean_
  commentId: M:Injecter.Injecter.InjectIntoType(System.Object,System.Boolean)
  fullName: Injecter.Injecter.InjectIntoType(System.Object, System.Boolean)
  nameWithType: Injecter.InjectIntoType(Object, Boolean)
- uid: Injecter.Injecter.InjectIntoType*
  name: InjectIntoType
  href: api/Injecter.Injecter.html#Injecter_Injecter_InjectIntoType_
  commentId: Overload:Injecter.Injecter.InjectIntoType
  isSpec: "True"
  fullName: Injecter.Injecter.InjectIntoType
  nameWithType: Injecter.InjectIntoType
- uid: Injecter.InjecterExtensions
  name: InjecterExtensions
  href: api/Injecter.InjecterExtensions.html
  commentId: T:Injecter.InjecterExtensions
  fullName: Injecter.InjecterExtensions
  nameWithType: InjecterExtensions
- uid: Injecter.InjecterExtensions.AddInjecter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Injecter.InjecterOptions})
  name: AddInjecter(IServiceCollection, Action<InjecterOptions>)
  href: api/Injecter.InjecterExtensions.html#Injecter_InjecterExtensions_AddInjecter_Microsoft_Extensions_DependencyInjection_IServiceCollection_System_Action_Injecter_InjecterOptions__
  commentId: M:Injecter.InjecterExtensions.AddInjecter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Injecter.InjecterOptions})
  name.vb: AddInjecter(IServiceCollection, Action(Of InjecterOptions))
  fullName: Injecter.InjecterExtensions.AddInjecter(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Injecter.InjecterOptions>)
  fullName.vb: Injecter.InjecterExtensions.AddInjecter(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Injecter.InjecterOptions))
  nameWithType: InjecterExtensions.AddInjecter(IServiceCollection, Action<InjecterOptions>)
  nameWithType.vb: InjecterExtensions.AddInjecter(IServiceCollection, Action(Of InjecterOptions))
- uid: Injecter.InjecterExtensions.AddInjecter*
  name: AddInjecter
  href: api/Injecter.InjecterExtensions.html#Injecter_InjecterExtensions_AddInjecter_
  commentId: Overload:Injecter.InjecterExtensions.AddInjecter
  isSpec: "True"
  fullName: Injecter.InjecterExtensions.AddInjecter
  nameWithType: InjecterExtensions.AddInjecter
- uid: Injecter.InjecterOptions
  name: InjecterOptions
  href: api/Injecter.InjecterOptions.html
  commentId: T:Injecter.InjecterOptions
  fullName: Injecter.InjecterOptions
  nameWithType: InjecterOptions
- uid: Injecter.InjecterOptions.UseCaching
  name: UseCaching
  href: api/Injecter.InjecterOptions.html#Injecter_InjecterOptions_UseCaching
  commentId: P:Injecter.InjecterOptions.UseCaching
  fullName: Injecter.InjecterOptions.UseCaching
  nameWithType: InjecterOptions.UseCaching
- uid: Injecter.InjecterOptions.UseCaching*
  name: UseCaching
  href: api/Injecter.InjecterOptions.html#Injecter_InjecterOptions_UseCaching_
  commentId: Overload:Injecter.InjecterOptions.UseCaching
  isSpec: "True"
  fullName: Injecter.InjecterOptions.UseCaching
  nameWithType: InjecterOptions.UseCaching
- uid: Injecter.IScopeStore
  name: IScopeStore
  href: api/Injecter.IScopeStore.html
  commentId: T:Injecter.IScopeStore
  fullName: Injecter.IScopeStore
  nameWithType: IScopeStore
- uid: Injecter.IScopeStore.ClearAllScopes
  name: ClearAllScopes()
  href: api/Injecter.IScopeStore.html#Injecter_IScopeStore_ClearAllScopes
  commentId: M:Injecter.IScopeStore.ClearAllScopes
  fullName: Injecter.IScopeStore.ClearAllScopes()
  nameWithType: IScopeStore.ClearAllScopes()
- uid: Injecter.IScopeStore.ClearAllScopes*
  name: ClearAllScopes
  href: api/Injecter.IScopeStore.html#Injecter_IScopeStore_ClearAllScopes_
  commentId: Overload:Injecter.IScopeStore.ClearAllScopes
  isSpec: "True"
  fullName: Injecter.IScopeStore.ClearAllScopes
  nameWithType: IScopeStore.ClearAllScopes
- uid: Injecter.IScopeStore.CreateScope(System.Object)
  name: CreateScope(Object)
  href: api/Injecter.IScopeStore.html#Injecter_IScopeStore_CreateScope_System_Object_
  commentId: M:Injecter.IScopeStore.CreateScope(System.Object)
  fullName: Injecter.IScopeStore.CreateScope(System.Object)
  nameWithType: IScopeStore.CreateScope(Object)
- uid: Injecter.IScopeStore.CreateScope*
  name: CreateScope
  href: api/Injecter.IScopeStore.html#Injecter_IScopeStore_CreateScope_
  commentId: Overload:Injecter.IScopeStore.CreateScope
  isSpec: "True"
  fullName: Injecter.IScopeStore.CreateScope
  nameWithType: IScopeStore.CreateScope
- uid: Injecter.IScopeStore.DisposeScope(System.Object)
  name: DisposeScope(Object)
  href: api/Injecter.IScopeStore.html#Injecter_IScopeStore_DisposeScope_System_Object_
  commentId: M:Injecter.IScopeStore.DisposeScope(System.Object)
  fullName: Injecter.IScopeStore.DisposeScope(System.Object)
  nameWithType: IScopeStore.DisposeScope(Object)
- uid: Injecter.IScopeStore.DisposeScope*
  name: DisposeScope
  href: api/Injecter.IScopeStore.html#Injecter_IScopeStore_DisposeScope_
  commentId: Overload:Injecter.IScopeStore.DisposeScope
  isSpec: "True"
  fullName: Injecter.IScopeStore.DisposeScope
  nameWithType: IScopeStore.DisposeScope
- uid: Injecter.IScopeStore.GetScope(System.Object)
  name: GetScope(Object)
  href: api/Injecter.IScopeStore.html#Injecter_IScopeStore_GetScope_System_Object_
  commentId: M:Injecter.IScopeStore.GetScope(System.Object)
  fullName: Injecter.IScopeStore.GetScope(System.Object)
  nameWithType: IScopeStore.GetScope(Object)
- uid: Injecter.IScopeStore.GetScope*
  name: GetScope
  href: api/Injecter.IScopeStore.html#Injecter_IScopeStore_GetScope_
  commentId: Overload:Injecter.IScopeStore.GetScope
  isSpec: "True"
  fullName: Injecter.IScopeStore.GetScope
  nameWithType: IScopeStore.GetScope
- uid: Injecter.IScopeStore.NumberOfScopes
  name: NumberOfScopes
  href: api/Injecter.IScopeStore.html#Injecter_IScopeStore_NumberOfScopes
  commentId: P:Injecter.IScopeStore.NumberOfScopes
  fullName: Injecter.IScopeStore.NumberOfScopes
  nameWithType: IScopeStore.NumberOfScopes
- uid: Injecter.IScopeStore.NumberOfScopes*
  name: NumberOfScopes
  href: api/Injecter.IScopeStore.html#Injecter_IScopeStore_NumberOfScopes_
  commentId: Overload:Injecter.IScopeStore.NumberOfScopes
  isSpec: "True"
  fullName: Injecter.IScopeStore.NumberOfScopes
  nameWithType: IScopeStore.NumberOfScopes
- uid: Injecter.ScopeStore
  name: ScopeStore
  href: api/Injecter.ScopeStore.html
  commentId: T:Injecter.ScopeStore
  fullName: Injecter.ScopeStore
  nameWithType: ScopeStore
- uid: Injecter.ScopeStore.#ctor(System.IServiceProvider)
  name: ScopeStore(IServiceProvider)
  href: api/Injecter.ScopeStore.html#Injecter_ScopeStore__ctor_System_IServiceProvider_
  commentId: M:Injecter.ScopeStore.#ctor(System.IServiceProvider)
  fullName: Injecter.ScopeStore.ScopeStore(System.IServiceProvider)
  nameWithType: ScopeStore.ScopeStore(IServiceProvider)
- uid: Injecter.ScopeStore.#ctor*
  name: ScopeStore
  href: api/Injecter.ScopeStore.html#Injecter_ScopeStore__ctor_
  commentId: Overload:Injecter.ScopeStore.#ctor
  isSpec: "True"
  fullName: Injecter.ScopeStore.ScopeStore
  nameWithType: ScopeStore.ScopeStore
- uid: Injecter.ScopeStore.ClearAllScopes
  name: ClearAllScopes()
  href: api/Injecter.ScopeStore.html#Injecter_ScopeStore_ClearAllScopes
  commentId: M:Injecter.ScopeStore.ClearAllScopes
  fullName: Injecter.ScopeStore.ClearAllScopes()
  nameWithType: ScopeStore.ClearAllScopes()
- uid: Injecter.ScopeStore.ClearAllScopes*
  name: ClearAllScopes
  href: api/Injecter.ScopeStore.html#Injecter_ScopeStore_ClearAllScopes_
  commentId: Overload:Injecter.ScopeStore.ClearAllScopes
  isSpec: "True"
  fullName: Injecter.ScopeStore.ClearAllScopes
  nameWithType: ScopeStore.ClearAllScopes
- uid: Injecter.ScopeStore.CreateScope(System.Object)
  name: CreateScope(Object)
  href: api/Injecter.ScopeStore.html#Injecter_ScopeStore_CreateScope_System_Object_
  commentId: M:Injecter.ScopeStore.CreateScope(System.Object)
  fullName: Injecter.ScopeStore.CreateScope(System.Object)
  nameWithType: ScopeStore.CreateScope(Object)
- uid: Injecter.ScopeStore.CreateScope*
  name: CreateScope
  href: api/Injecter.ScopeStore.html#Injecter_ScopeStore_CreateScope_
  commentId: Overload:Injecter.ScopeStore.CreateScope
  isSpec: "True"
  fullName: Injecter.ScopeStore.CreateScope
  nameWithType: ScopeStore.CreateScope
- uid: Injecter.ScopeStore.Dispose
  name: Dispose()
  href: api/Injecter.ScopeStore.html#Injecter_ScopeStore_Dispose
  commentId: M:Injecter.ScopeStore.Dispose
  fullName: Injecter.ScopeStore.Dispose()
  nameWithType: ScopeStore.Dispose()
- uid: Injecter.ScopeStore.Dispose*
  name: Dispose
  href: api/Injecter.ScopeStore.html#Injecter_ScopeStore_Dispose_
  commentId: Overload:Injecter.ScopeStore.Dispose
  isSpec: "True"
  fullName: Injecter.ScopeStore.Dispose
  nameWithType: ScopeStore.Dispose
- uid: Injecter.ScopeStore.DisposeScope(System.Object)
  name: DisposeScope(Object)
  href: api/Injecter.ScopeStore.html#Injecter_ScopeStore_DisposeScope_System_Object_
  commentId: M:Injecter.ScopeStore.DisposeScope(System.Object)
  fullName: Injecter.ScopeStore.DisposeScope(System.Object)
  nameWithType: ScopeStore.DisposeScope(Object)
- uid: Injecter.ScopeStore.DisposeScope*
  name: DisposeScope
  href: api/Injecter.ScopeStore.html#Injecter_ScopeStore_DisposeScope_
  commentId: Overload:Injecter.ScopeStore.DisposeScope
  isSpec: "True"
  fullName: Injecter.ScopeStore.DisposeScope
  nameWithType: ScopeStore.DisposeScope
- uid: Injecter.ScopeStore.GetScope(System.Object)
  name: GetScope(Object)
  href: api/Injecter.ScopeStore.html#Injecter_ScopeStore_GetScope_System_Object_
  commentId: M:Injecter.ScopeStore.GetScope(System.Object)
  fullName: Injecter.ScopeStore.GetScope(System.Object)
  nameWithType: ScopeStore.GetScope(Object)
- uid: Injecter.ScopeStore.GetScope*
  name: GetScope
  href: api/Injecter.ScopeStore.html#Injecter_ScopeStore_GetScope_
  commentId: Overload:Injecter.ScopeStore.GetScope
  isSpec: "True"
  fullName: Injecter.ScopeStore.GetScope
  nameWithType: ScopeStore.GetScope
- uid: Injecter.ScopeStore.NumberOfScopes
  name: NumberOfScopes
  href: api/Injecter.ScopeStore.html#Injecter_ScopeStore_NumberOfScopes
  commentId: P:Injecter.ScopeStore.NumberOfScopes
  fullName: Injecter.ScopeStore.NumberOfScopes
  nameWithType: ScopeStore.NumberOfScopes
- uid: Injecter.ScopeStore.NumberOfScopes*
  name: NumberOfScopes
  href: api/Injecter.ScopeStore.html#Injecter_ScopeStore_NumberOfScopes_
  commentId: Overload:Injecter.ScopeStore.NumberOfScopes
  isSpec: "True"
  fullName: Injecter.ScopeStore.NumberOfScopes
  nameWithType: ScopeStore.NumberOfScopes
- uid: Injecter.TypeHelpers
  name: TypeHelpers
  href: api/Injecter.TypeHelpers.html
  commentId: T:Injecter.TypeHelpers
  fullName: Injecter.TypeHelpers
  nameWithType: TypeHelpers
- uid: Injecter.TypeHelpers.GetInjectableMembers(System.Type)
  name: GetInjectableMembers(Type)
  href: api/Injecter.TypeHelpers.html#Injecter_TypeHelpers_GetInjectableMembers_System_Type_
  commentId: M:Injecter.TypeHelpers.GetInjectableMembers(System.Type)
  fullName: Injecter.TypeHelpers.GetInjectableMembers(System.Type)
  nameWithType: TypeHelpers.GetInjectableMembers(Type)
- uid: Injecter.TypeHelpers.GetInjectableMembers*
  name: GetInjectableMembers
  href: api/Injecter.TypeHelpers.html#Injecter_TypeHelpers_GetInjectableMembers_
  commentId: Overload:Injecter.TypeHelpers.GetInjectableMembers
  isSpec: "True"
  fullName: Injecter.TypeHelpers.GetInjectableMembers
  nameWithType: TypeHelpers.GetInjectableMembers
- uid: Injecter.Unity
  name: Injecter.Unity
  href: api/Injecter.Unity.html
  commentId: N:Injecter.Unity
  fullName: Injecter.Unity
  nameWithType: Injecter.Unity
- uid: Injecter.Unity.Editor
  name: Injecter.Unity.Editor
  href: api/Injecter.Unity.Editor.html
  commentId: N:Injecter.Unity.Editor
  fullName: Injecter.Unity.Editor
  nameWithType: Injecter.Unity.Editor
- uid: Injecter.Unity.Editor.AppInstallerTemplateItem
  name: AppInstallerTemplateItem
  href: api/Injecter.Unity.Editor.AppInstallerTemplateItem.html
  commentId: T:Injecter.Unity.Editor.AppInstallerTemplateItem
  fullName: Injecter.Unity.Editor.AppInstallerTemplateItem
  nameWithType: AppInstallerTemplateItem
- uid: Injecter.Unity.Editor.MonoInjecterFinder
  name: MonoInjecterFinder
  href: api/Injecter.Unity.Editor.MonoInjecterFinder.html
  commentId: T:Injecter.Unity.Editor.MonoInjecterFinder
  fullName: Injecter.Unity.Editor.MonoInjecterFinder
  nameWithType: MonoInjecterFinder
- uid: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToCurrentScene
  name: AddComponentsToCurrentScene()
  href: api/Injecter.Unity.Editor.MonoInjecterFinder.html#Injecter_Unity_Editor_MonoInjecterFinder_AddComponentsToCurrentScene
  commentId: M:Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToCurrentScene
  fullName: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToCurrentScene()
  nameWithType: MonoInjecterFinder.AddComponentsToCurrentScene()
- uid: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToCurrentScene*
  name: AddComponentsToCurrentScene
  href: api/Injecter.Unity.Editor.MonoInjecterFinder.html#Injecter_Unity_Editor_MonoInjecterFinder_AddComponentsToCurrentScene_
  commentId: Overload:Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToCurrentScene
  isSpec: "True"
  fullName: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToCurrentScene
  nameWithType: MonoInjecterFinder.AddComponentsToCurrentScene
- uid: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEveryPrefab
  name: AddComponentsToEveryPrefab()
  href: api/Injecter.Unity.Editor.MonoInjecterFinder.html#Injecter_Unity_Editor_MonoInjecterFinder_AddComponentsToEveryPrefab
  commentId: M:Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEveryPrefab
  fullName: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEveryPrefab()
  nameWithType: MonoInjecterFinder.AddComponentsToEveryPrefab()
- uid: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEveryPrefab*
  name: AddComponentsToEveryPrefab
  href: api/Injecter.Unity.Editor.MonoInjecterFinder.html#Injecter_Unity_Editor_MonoInjecterFinder_AddComponentsToEveryPrefab_
  commentId: Overload:Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEveryPrefab
  isSpec: "True"
  fullName: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEveryPrefab
  nameWithType: MonoInjecterFinder.AddComponentsToEveryPrefab
- uid: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEveryScene
  name: AddComponentsToEveryScene()
  href: api/Injecter.Unity.Editor.MonoInjecterFinder.html#Injecter_Unity_Editor_MonoInjecterFinder_AddComponentsToEveryScene
  commentId: M:Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEveryScene
  fullName: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEveryScene()
  nameWithType: MonoInjecterFinder.AddComponentsToEveryScene()
- uid: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEveryScene*
  name: AddComponentsToEveryScene
  href: api/Injecter.Unity.Editor.MonoInjecterFinder.html#Injecter_Unity_Editor_MonoInjecterFinder_AddComponentsToEveryScene_
  commentId: Overload:Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEveryScene
  isSpec: "True"
  fullName: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEveryScene
  nameWithType: MonoInjecterFinder.AddComponentsToEveryScene
- uid: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEverything
  name: AddComponentsToEverything()
  href: api/Injecter.Unity.Editor.MonoInjecterFinder.html#Injecter_Unity_Editor_MonoInjecterFinder_AddComponentsToEverything
  commentId: M:Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEverything
  fullName: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEverything()
  nameWithType: MonoInjecterFinder.AddComponentsToEverything()
- uid: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEverything*
  name: AddComponentsToEverything
  href: api/Injecter.Unity.Editor.MonoInjecterFinder.html#Injecter_Unity_Editor_MonoInjecterFinder_AddComponentsToEverything_
  commentId: Overload:Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEverything
  isSpec: "True"
  fullName: Injecter.Unity.Editor.MonoInjecterFinder.AddComponentsToEverything
  nameWithType: MonoInjecterFinder.AddComponentsToEverything
- uid: Injecter.Unity.MonoBehaviourInjected
  name: MonoBehaviourInjected
  href: api/Injecter.Unity.MonoBehaviourInjected.html
  commentId: T:Injecter.Unity.MonoBehaviourInjected
  fullName: Injecter.Unity.MonoBehaviourInjected
  nameWithType: MonoBehaviourInjected
- uid: Injecter.Unity.MonoBehaviourInjected.Awake
  name: Awake()
  href: api/Injecter.Unity.MonoBehaviourInjected.html#Injecter_Unity_MonoBehaviourInjected_Awake
  commentId: M:Injecter.Unity.MonoBehaviourInjected.Awake
  fullName: Injecter.Unity.MonoBehaviourInjected.Awake()
  nameWithType: MonoBehaviourInjected.Awake()
- uid: Injecter.Unity.MonoBehaviourInjected.Awake*
  name: Awake
  href: api/Injecter.Unity.MonoBehaviourInjected.html#Injecter_Unity_MonoBehaviourInjected_Awake_
  commentId: Overload:Injecter.Unity.MonoBehaviourInjected.Awake
  isSpec: "True"
  fullName: Injecter.Unity.MonoBehaviourInjected.Awake
  nameWithType: MonoBehaviourInjected.Awake
- uid: Injecter.Unity.MonoBehaviourInjected.OnDestroy
  name: OnDestroy()
  href: api/Injecter.Unity.MonoBehaviourInjected.html#Injecter_Unity_MonoBehaviourInjected_OnDestroy
  commentId: M:Injecter.Unity.MonoBehaviourInjected.OnDestroy
  fullName: Injecter.Unity.MonoBehaviourInjected.OnDestroy()
  nameWithType: MonoBehaviourInjected.OnDestroy()
- uid: Injecter.Unity.MonoBehaviourInjected.OnDestroy*
  name: OnDestroy
  href: api/Injecter.Unity.MonoBehaviourInjected.html#Injecter_Unity_MonoBehaviourInjected_OnDestroy_
  commentId: Overload:Injecter.Unity.MonoBehaviourInjected.OnDestroy
  isSpec: "True"
  fullName: Injecter.Unity.MonoBehaviourInjected.OnDestroy
  nameWithType: MonoBehaviourInjected.OnDestroy
- uid: Injecter.Unity.MonoBehaviourInjected.Scope
  name: Scope
  href: api/Injecter.Unity.MonoBehaviourInjected.html#Injecter_Unity_MonoBehaviourInjected_Scope
  commentId: P:Injecter.Unity.MonoBehaviourInjected.Scope
  fullName: Injecter.Unity.MonoBehaviourInjected.Scope
  nameWithType: MonoBehaviourInjected.Scope
- uid: Injecter.Unity.MonoBehaviourInjected.Scope*
  name: Scope
  href: api/Injecter.Unity.MonoBehaviourInjected.html#Injecter_Unity_MonoBehaviourInjected_Scope_
  commentId: Overload:Injecter.Unity.MonoBehaviourInjected.Scope
  isSpec: "True"
  fullName: Injecter.Unity.MonoBehaviourInjected.Scope
  nameWithType: MonoBehaviourInjected.Scope
- uid: Injecter.Unity.MonoDisposer
  name: MonoDisposer
  href: api/Injecter.Unity.MonoDisposer.html
  commentId: T:Injecter.Unity.MonoDisposer
  fullName: Injecter.Unity.MonoDisposer
  nameWithType: MonoDisposer
- uid: Injecter.Unity.MonoDisposer.AddOwner(UnityEngine.MonoBehaviour)
  name: AddOwner(MonoBehaviour)
  href: api/Injecter.Unity.MonoDisposer.html#Injecter_Unity_MonoDisposer_AddOwner_UnityEngine_MonoBehaviour_
  commentId: M:Injecter.Unity.MonoDisposer.AddOwner(UnityEngine.MonoBehaviour)
  fullName: Injecter.Unity.MonoDisposer.AddOwner(UnityEngine.MonoBehaviour)
  nameWithType: MonoDisposer.AddOwner(MonoBehaviour)
- uid: Injecter.Unity.MonoDisposer.AddOwner*
  name: AddOwner
  href: api/Injecter.Unity.MonoDisposer.html#Injecter_Unity_MonoDisposer_AddOwner_
  commentId: Overload:Injecter.Unity.MonoDisposer.AddOwner
  isSpec: "True"
  fullName: Injecter.Unity.MonoDisposer.AddOwner
  nameWithType: MonoDisposer.AddOwner
- uid: Injecter.Unity.MonoDisposer.Initialize(System.Collections.Generic.List{UnityEngine.MonoBehaviour},Injecter.IScopeStore)
  name: Initialize(List<MonoBehaviour>, IScopeStore)
  href: api/Injecter.Unity.MonoDisposer.html#Injecter_Unity_MonoDisposer_Initialize_System_Collections_Generic_List_UnityEngine_MonoBehaviour__Injecter_IScopeStore_
  commentId: M:Injecter.Unity.MonoDisposer.Initialize(System.Collections.Generic.List{UnityEngine.MonoBehaviour},Injecter.IScopeStore)
  name.vb: Initialize(List(Of MonoBehaviour), IScopeStore)
  fullName: Injecter.Unity.MonoDisposer.Initialize(System.Collections.Generic.List<UnityEngine.MonoBehaviour>, Injecter.IScopeStore)
  fullName.vb: Injecter.Unity.MonoDisposer.Initialize(System.Collections.Generic.List(Of UnityEngine.MonoBehaviour), Injecter.IScopeStore)
  nameWithType: MonoDisposer.Initialize(List<MonoBehaviour>, IScopeStore)
  nameWithType.vb: MonoDisposer.Initialize(List(Of MonoBehaviour), IScopeStore)
- uid: Injecter.Unity.MonoDisposer.Initialize*
  name: Initialize
  href: api/Injecter.Unity.MonoDisposer.html#Injecter_Unity_MonoDisposer_Initialize_
  commentId: Overload:Injecter.Unity.MonoDisposer.Initialize
  isSpec: "True"
  fullName: Injecter.Unity.MonoDisposer.Initialize
  nameWithType: MonoDisposer.Initialize
- uid: Injecter.Unity.MonoInjector
  name: MonoInjector
  href: api/Injecter.Unity.MonoInjector.html
  commentId: T:Injecter.Unity.MonoInjector
  fullName: Injecter.Unity.MonoInjector
  nameWithType: MonoInjector
- uid: Injecter.Uwp
  name: Injecter.Uwp
  href: api/Injecter.Uwp.html
  commentId: N:Injecter.Uwp
  fullName: Injecter.Uwp
  nameWithType: Injecter.Uwp
- uid: Injecter.Uwp.DisposeBehaviour
  name: DisposeBehaviour
  href: api/Injecter.Uwp.DisposeBehaviour.html
  commentId: T:Injecter.Uwp.DisposeBehaviour
  fullName: Injecter.Uwp.DisposeBehaviour
  nameWithType: DisposeBehaviour
- uid: Injecter.Uwp.DisposeBehaviour.Manual
  name: Manual
  href: api/Injecter.Uwp.DisposeBehaviour.html#Injecter_Uwp_DisposeBehaviour_Manual
  commentId: F:Injecter.Uwp.DisposeBehaviour.Manual
  fullName: Injecter.Uwp.DisposeBehaviour.Manual
  nameWithType: DisposeBehaviour.Manual
- uid: Injecter.Uwp.DisposeBehaviour.OnUnloaded
  name: OnUnloaded
  href: api/Injecter.Uwp.DisposeBehaviour.html#Injecter_Uwp_DisposeBehaviour_OnUnloaded
  commentId: F:Injecter.Uwp.DisposeBehaviour.OnUnloaded
  fullName: Injecter.Uwp.DisposeBehaviour.OnUnloaded
  nameWithType: DisposeBehaviour.OnUnloaded
- uid: Injecter.Uwp.DisposeBehaviour.OnWindowClose
  name: OnWindowClose
  href: api/Injecter.Uwp.DisposeBehaviour.html#Injecter_Uwp_DisposeBehaviour_OnWindowClose
  commentId: F:Injecter.Uwp.DisposeBehaviour.OnWindowClose
  fullName: Injecter.Uwp.DisposeBehaviour.OnWindowClose
  nameWithType: DisposeBehaviour.OnWindowClose
- uid: Injecter.Uwp.XamlInjecter
  name: XamlInjecter
  href: api/Injecter.Uwp.XamlInjecter.html
  commentId: T:Injecter.Uwp.XamlInjecter
  fullName: Injecter.Uwp.XamlInjecter
  nameWithType: XamlInjecter
- uid: Injecter.Uwp.XamlInjecter.GetInject(Windows.UI.Xaml.UIElement)
  name: GetInject(UIElement)
  href: api/Injecter.Uwp.XamlInjecter.html#Injecter_Uwp_XamlInjecter_GetInject_Windows_UI_Xaml_UIElement_
  commentId: M:Injecter.Uwp.XamlInjecter.GetInject(Windows.UI.Xaml.UIElement)
  fullName: Injecter.Uwp.XamlInjecter.GetInject(Windows.UI.Xaml.UIElement)
  nameWithType: XamlInjecter.GetInject(UIElement)
- uid: Injecter.Uwp.XamlInjecter.GetInject*
  name: GetInject
  href: api/Injecter.Uwp.XamlInjecter.html#Injecter_Uwp_XamlInjecter_GetInject_
  commentId: Overload:Injecter.Uwp.XamlInjecter.GetInject
  isSpec: "True"
  fullName: Injecter.Uwp.XamlInjecter.GetInject
  nameWithType: XamlInjecter.GetInject
- uid: Injecter.Uwp.XamlInjecter.GetInjectScoped(Windows.UI.Xaml.UIElement)
  name: GetInjectScoped(UIElement)
  href: api/Injecter.Uwp.XamlInjecter.html#Injecter_Uwp_XamlInjecter_GetInjectScoped_Windows_UI_Xaml_UIElement_
  commentId: M:Injecter.Uwp.XamlInjecter.GetInjectScoped(Windows.UI.Xaml.UIElement)
  fullName: Injecter.Uwp.XamlInjecter.GetInjectScoped(Windows.UI.Xaml.UIElement)
  nameWithType: XamlInjecter.GetInjectScoped(UIElement)
- uid: Injecter.Uwp.XamlInjecter.GetInjectScoped*
  name: GetInjectScoped
  href: api/Injecter.Uwp.XamlInjecter.html#Injecter_Uwp_XamlInjecter_GetInjectScoped_
  commentId: Overload:Injecter.Uwp.XamlInjecter.GetInjectScoped
  isSpec: "True"
  fullName: Injecter.Uwp.XamlInjecter.GetInjectScoped
  nameWithType: XamlInjecter.GetInjectScoped
- uid: Injecter.Uwp.XamlInjecter.InjectProperty
  name: InjectProperty
  href: api/Injecter.Uwp.XamlInjecter.html#Injecter_Uwp_XamlInjecter_InjectProperty
  commentId: F:Injecter.Uwp.XamlInjecter.InjectProperty
  fullName: Injecter.Uwp.XamlInjecter.InjectProperty
  nameWithType: XamlInjecter.InjectProperty
- uid: Injecter.Uwp.XamlInjecter.InjectScopedProperty
  name: InjectScopedProperty
  href: api/Injecter.Uwp.XamlInjecter.html#Injecter_Uwp_XamlInjecter_InjectScopedProperty
  commentId: F:Injecter.Uwp.XamlInjecter.InjectScopedProperty
  fullName: Injecter.Uwp.XamlInjecter.InjectScopedProperty
  nameWithType: XamlInjecter.InjectScopedProperty
- uid: Injecter.Uwp.XamlInjecter.SetInject(Windows.UI.Xaml.UIElement,System.Boolean)
  name: SetInject(UIElement, Boolean)
  href: api/Injecter.Uwp.XamlInjecter.html#Injecter_Uwp_XamlInjecter_SetInject_Windows_UI_Xaml_UIElement_System_Boolean_
  commentId: M:Injecter.Uwp.XamlInjecter.SetInject(Windows.UI.Xaml.UIElement,System.Boolean)
  fullName: Injecter.Uwp.XamlInjecter.SetInject(Windows.UI.Xaml.UIElement, System.Boolean)
  nameWithType: XamlInjecter.SetInject(UIElement, Boolean)
- uid: Injecter.Uwp.XamlInjecter.SetInject*
  name: SetInject
  href: api/Injecter.Uwp.XamlInjecter.html#Injecter_Uwp_XamlInjecter_SetInject_
  commentId: Overload:Injecter.Uwp.XamlInjecter.SetInject
  isSpec: "True"
  fullName: Injecter.Uwp.XamlInjecter.SetInject
  nameWithType: XamlInjecter.SetInject
- uid: Injecter.Uwp.XamlInjecter.SetInjectScoped(Windows.UI.Xaml.UIElement,Injecter.Uwp.DisposeBehaviour)
  name: SetInjectScoped(UIElement, DisposeBehaviour)
  href: api/Injecter.Uwp.XamlInjecter.html#Injecter_Uwp_XamlInjecter_SetInjectScoped_Windows_UI_Xaml_UIElement_Injecter_Uwp_DisposeBehaviour_
  commentId: M:Injecter.Uwp.XamlInjecter.SetInjectScoped(Windows.UI.Xaml.UIElement,Injecter.Uwp.DisposeBehaviour)
  fullName: Injecter.Uwp.XamlInjecter.SetInjectScoped(Windows.UI.Xaml.UIElement, Injecter.Uwp.DisposeBehaviour)
  nameWithType: XamlInjecter.SetInjectScoped(UIElement, DisposeBehaviour)
- uid: Injecter.Uwp.XamlInjecter.SetInjectScoped*
  name: SetInjectScoped
  href: api/Injecter.Uwp.XamlInjecter.html#Injecter_Uwp_XamlInjecter_SetInjectScoped_
  commentId: Overload:Injecter.Uwp.XamlInjecter.SetInjectScoped
  isSpec: "True"
  fullName: Injecter.Uwp.XamlInjecter.SetInjectScoped
  nameWithType: XamlInjecter.SetInjectScoped
- uid: Injecter.Wpf
  name: Injecter.Wpf
  href: api/Injecter.Wpf.html
  commentId: N:Injecter.Wpf
  fullName: Injecter.Wpf
  nameWithType: Injecter.Wpf
- uid: Injecter.Wpf.DisposeBehaviour
  name: DisposeBehaviour
  href: api/Injecter.Wpf.DisposeBehaviour.html
  commentId: T:Injecter.Wpf.DisposeBehaviour
  fullName: Injecter.Wpf.DisposeBehaviour
  nameWithType: DisposeBehaviour
- uid: Injecter.Wpf.DisposeBehaviour.Manual
  name: Manual
  href: api/Injecter.Wpf.DisposeBehaviour.html#Injecter_Wpf_DisposeBehaviour_Manual
  commentId: F:Injecter.Wpf.DisposeBehaviour.Manual
  fullName: Injecter.Wpf.DisposeBehaviour.Manual
  nameWithType: DisposeBehaviour.Manual
- uid: Injecter.Wpf.DisposeBehaviour.OnDispatcherShutdown
  name: OnDispatcherShutdown
  href: api/Injecter.Wpf.DisposeBehaviour.html#Injecter_Wpf_DisposeBehaviour_OnDispatcherShutdown
  commentId: F:Injecter.Wpf.DisposeBehaviour.OnDispatcherShutdown
  fullName: Injecter.Wpf.DisposeBehaviour.OnDispatcherShutdown
  nameWithType: DisposeBehaviour.OnDispatcherShutdown
- uid: Injecter.Wpf.DisposeBehaviour.OnUnloaded
  name: OnUnloaded
  href: api/Injecter.Wpf.DisposeBehaviour.html#Injecter_Wpf_DisposeBehaviour_OnUnloaded
  commentId: F:Injecter.Wpf.DisposeBehaviour.OnUnloaded
  fullName: Injecter.Wpf.DisposeBehaviour.OnUnloaded
  nameWithType: DisposeBehaviour.OnUnloaded
- uid: Injecter.Wpf.DisposeBehaviour.OnWindowClose
  name: OnWindowClose
  href: api/Injecter.Wpf.DisposeBehaviour.html#Injecter_Wpf_DisposeBehaviour_OnWindowClose
  commentId: F:Injecter.Wpf.DisposeBehaviour.OnWindowClose
  fullName: Injecter.Wpf.DisposeBehaviour.OnWindowClose
  nameWithType: DisposeBehaviour.OnWindowClose
- uid: Injecter.Wpf.XamlInjecter
  name: XamlInjecter
  href: api/Injecter.Wpf.XamlInjecter.html
  commentId: T:Injecter.Wpf.XamlInjecter
  fullName: Injecter.Wpf.XamlInjecter
  nameWithType: XamlInjecter
- uid: Injecter.Wpf.XamlInjecter.CleanUp(System.Windows.FrameworkElement@)
  name: CleanUp(ref FrameworkElement)
  href: api/Injecter.Wpf.XamlInjecter.html#Injecter_Wpf_XamlInjecter_CleanUp_System_Windows_FrameworkElement__
  commentId: M:Injecter.Wpf.XamlInjecter.CleanUp(System.Windows.FrameworkElement@)
  name.vb: CleanUp(ByRef FrameworkElement)
  fullName: Injecter.Wpf.XamlInjecter.CleanUp(ref System.Windows.FrameworkElement)
  fullName.vb: Injecter.Wpf.XamlInjecter.CleanUp(ByRef System.Windows.FrameworkElement)
  nameWithType: XamlInjecter.CleanUp(ref FrameworkElement)
  nameWithType.vb: XamlInjecter.CleanUp(ByRef FrameworkElement)
- uid: Injecter.Wpf.XamlInjecter.CleanUp*
  name: CleanUp
  href: api/Injecter.Wpf.XamlInjecter.html#Injecter_Wpf_XamlInjecter_CleanUp_
  commentId: Overload:Injecter.Wpf.XamlInjecter.CleanUp
  isSpec: "True"
  fullName: Injecter.Wpf.XamlInjecter.CleanUp
  nameWithType: XamlInjecter.CleanUp
- uid: Injecter.Wpf.XamlInjecter.GetInject(System.Windows.DependencyObject)
  name: GetInject(DependencyObject)
  href: api/Injecter.Wpf.XamlInjecter.html#Injecter_Wpf_XamlInjecter_GetInject_System_Windows_DependencyObject_
  commentId: M:Injecter.Wpf.XamlInjecter.GetInject(System.Windows.DependencyObject)
  fullName: Injecter.Wpf.XamlInjecter.GetInject(System.Windows.DependencyObject)
  nameWithType: XamlInjecter.GetInject(DependencyObject)
- uid: Injecter.Wpf.XamlInjecter.GetInject*
  name: GetInject
  href: api/Injecter.Wpf.XamlInjecter.html#Injecter_Wpf_XamlInjecter_GetInject_
  commentId: Overload:Injecter.Wpf.XamlInjecter.GetInject
  isSpec: "True"
  fullName: Injecter.Wpf.XamlInjecter.GetInject
  nameWithType: XamlInjecter.GetInject
- uid: Injecter.Wpf.XamlInjecter.GetInjectScoped(System.Windows.DependencyObject)
  name: GetInjectScoped(DependencyObject)
  href: api/Injecter.Wpf.XamlInjecter.html#Injecter_Wpf_XamlInjecter_GetInjectScoped_System_Windows_DependencyObject_
  commentId: M:Injecter.Wpf.XamlInjecter.GetInjectScoped(System.Windows.DependencyObject)
  fullName: Injecter.Wpf.XamlInjecter.GetInjectScoped(System.Windows.DependencyObject)
  nameWithType: XamlInjecter.GetInjectScoped(DependencyObject)
- uid: Injecter.Wpf.XamlInjecter.GetInjectScoped*
  name: GetInjectScoped
  href: api/Injecter.Wpf.XamlInjecter.html#Injecter_Wpf_XamlInjecter_GetInjectScoped_
  commentId: Overload:Injecter.Wpf.XamlInjecter.GetInjectScoped
  isSpec: "True"
  fullName: Injecter.Wpf.XamlInjecter.GetInjectScoped
  nameWithType: XamlInjecter.GetInjectScoped
- uid: Injecter.Wpf.XamlInjecter.InjectProperty
  name: InjectProperty
  href: api/Injecter.Wpf.XamlInjecter.html#Injecter_Wpf_XamlInjecter_InjectProperty
  commentId: F:Injecter.Wpf.XamlInjecter.InjectProperty
  fullName: Injecter.Wpf.XamlInjecter.InjectProperty
  nameWithType: XamlInjecter.InjectProperty
- uid: Injecter.Wpf.XamlInjecter.InjectScopedProperty
  name: InjectScopedProperty
  href: api/Injecter.Wpf.XamlInjecter.html#Injecter_Wpf_XamlInjecter_InjectScopedProperty
  commentId: F:Injecter.Wpf.XamlInjecter.InjectScopedProperty
  fullName: Injecter.Wpf.XamlInjecter.InjectScopedProperty
  nameWithType: XamlInjecter.InjectScopedProperty
- uid: Injecter.Wpf.XamlInjecter.SetInject(System.Windows.DependencyObject,System.Nullable{System.Boolean})
  name: SetInject(DependencyObject, Nullable<Boolean>)
  href: api/Injecter.Wpf.XamlInjecter.html#Injecter_Wpf_XamlInjecter_SetInject_System_Windows_DependencyObject_System_Nullable_System_Boolean__
  commentId: M:Injecter.Wpf.XamlInjecter.SetInject(System.Windows.DependencyObject,System.Nullable{System.Boolean})
  name.vb: SetInject(DependencyObject, Nullable(Of Boolean))
  fullName: Injecter.Wpf.XamlInjecter.SetInject(System.Windows.DependencyObject, System.Nullable<System.Boolean>)
  fullName.vb: Injecter.Wpf.XamlInjecter.SetInject(System.Windows.DependencyObject, System.Nullable(Of System.Boolean))
  nameWithType: XamlInjecter.SetInject(DependencyObject, Nullable<Boolean>)
  nameWithType.vb: XamlInjecter.SetInject(DependencyObject, Nullable(Of Boolean))
- uid: Injecter.Wpf.XamlInjecter.SetInject*
  name: SetInject
  href: api/Injecter.Wpf.XamlInjecter.html#Injecter_Wpf_XamlInjecter_SetInject_
  commentId: Overload:Injecter.Wpf.XamlInjecter.SetInject
  isSpec: "True"
  fullName: Injecter.Wpf.XamlInjecter.SetInject
  nameWithType: XamlInjecter.SetInject
- uid: Injecter.Wpf.XamlInjecter.SetInjectScoped(System.Windows.DependencyObject,Injecter.Wpf.DisposeBehaviour)
  name: SetInjectScoped(DependencyObject, DisposeBehaviour)
  href: api/Injecter.Wpf.XamlInjecter.html#Injecter_Wpf_XamlInjecter_SetInjectScoped_System_Windows_DependencyObject_Injecter_Wpf_DisposeBehaviour_
  commentId: M:Injecter.Wpf.XamlInjecter.SetInjectScoped(System.Windows.DependencyObject,Injecter.Wpf.DisposeBehaviour)
  fullName: Injecter.Wpf.XamlInjecter.SetInjectScoped(System.Windows.DependencyObject, Injecter.Wpf.DisposeBehaviour)
  nameWithType: XamlInjecter.SetInjectScoped(DependencyObject, DisposeBehaviour)
- uid: Injecter.Wpf.XamlInjecter.SetInjectScoped*
  name: SetInjectScoped
  href: api/Injecter.Wpf.XamlInjecter.html#Injecter_Wpf_XamlInjecter_SetInjectScoped_
  commentId: Overload:Injecter.Wpf.XamlInjecter.SetInjectScoped
  isSpec: "True"
  fullName: Injecter.Wpf.XamlInjecter.SetInjectScoped
  nameWithType: XamlInjecter.SetInjectScoped
- uid: Injecter.Xamarin.Forms
  name: Injecter.Xamarin.Forms
  href: api/Injecter.Xamarin.Forms.html
  commentId: N:Injecter.Xamarin.Forms
  fullName: Injecter.Xamarin.Forms
  nameWithType: Injecter.Xamarin.Forms
- uid: Injecter.Xamarin.Forms.DisposeBehaviour
  name: DisposeBehaviour
  href: api/Injecter.Xamarin.Forms.DisposeBehaviour.html
  commentId: T:Injecter.Xamarin.Forms.DisposeBehaviour
  fullName: Injecter.Xamarin.Forms.DisposeBehaviour
  nameWithType: DisposeBehaviour
- uid: Injecter.Xamarin.Forms.DisposeBehaviour.Manual
  name: Manual
  href: api/Injecter.Xamarin.Forms.DisposeBehaviour.html#Injecter_Xamarin_Forms_DisposeBehaviour_Manual
  commentId: F:Injecter.Xamarin.Forms.DisposeBehaviour.Manual
  fullName: Injecter.Xamarin.Forms.DisposeBehaviour.Manual
  nameWithType: DisposeBehaviour.Manual
- uid: Injecter.Xamarin.Forms.DisposeBehaviour.OnDisappearing
  name: OnDisappearing
  href: api/Injecter.Xamarin.Forms.DisposeBehaviour.html#Injecter_Xamarin_Forms_DisposeBehaviour_OnDisappearing
  commentId: F:Injecter.Xamarin.Forms.DisposeBehaviour.OnDisappearing
  fullName: Injecter.Xamarin.Forms.DisposeBehaviour.OnDisappearing
  nameWithType: DisposeBehaviour.OnDisappearing
- uid: Injecter.Xamarin.Forms.XamlInjecter
  name: XamlInjecter
  href: api/Injecter.Xamarin.Forms.XamlInjecter.html
  commentId: T:Injecter.Xamarin.Forms.XamlInjecter
  fullName: Injecter.Xamarin.Forms.XamlInjecter
  nameWithType: XamlInjecter
- uid: Injecter.Xamarin.Forms.XamlInjecter.GetInject(Xamarin.Forms.BindableObject)
  name: GetInject(BindableObject)
  href: api/Injecter.Xamarin.Forms.XamlInjecter.html#Injecter_Xamarin_Forms_XamlInjecter_GetInject_Xamarin_Forms_BindableObject_
  commentId: M:Injecter.Xamarin.Forms.XamlInjecter.GetInject(Xamarin.Forms.BindableObject)
  fullName: Injecter.Xamarin.Forms.XamlInjecter.GetInject(Xamarin.Forms.BindableObject)
  nameWithType: XamlInjecter.GetInject(BindableObject)
- uid: Injecter.Xamarin.Forms.XamlInjecter.GetInject*
  name: GetInject
  href: api/Injecter.Xamarin.Forms.XamlInjecter.html#Injecter_Xamarin_Forms_XamlInjecter_GetInject_
  commentId: Overload:Injecter.Xamarin.Forms.XamlInjecter.GetInject
  isSpec: "True"
  fullName: Injecter.Xamarin.Forms.XamlInjecter.GetInject
  nameWithType: XamlInjecter.GetInject
- uid: Injecter.Xamarin.Forms.XamlInjecter.GetInjectScoped(Xamarin.Forms.BindableObject)
  name: GetInjectScoped(BindableObject)
  href: api/Injecter.Xamarin.Forms.XamlInjecter.html#Injecter_Xamarin_Forms_XamlInjecter_GetInjectScoped_Xamarin_Forms_BindableObject_
  commentId: M:Injecter.Xamarin.Forms.XamlInjecter.GetInjectScoped(Xamarin.Forms.BindableObject)
  fullName: Injecter.Xamarin.Forms.XamlInjecter.GetInjectScoped(Xamarin.Forms.BindableObject)
  nameWithType: XamlInjecter.GetInjectScoped(BindableObject)
- uid: Injecter.Xamarin.Forms.XamlInjecter.GetInjectScoped*
  name: GetInjectScoped
  href: api/Injecter.Xamarin.Forms.XamlInjecter.html#Injecter_Xamarin_Forms_XamlInjecter_GetInjectScoped_
  commentId: Overload:Injecter.Xamarin.Forms.XamlInjecter.GetInjectScoped
  isSpec: "True"
  fullName: Injecter.Xamarin.Forms.XamlInjecter.GetInjectScoped
  nameWithType: XamlInjecter.GetInjectScoped
- uid: Injecter.Xamarin.Forms.XamlInjecter.InjectProperty
  name: InjectProperty
  href: api/Injecter.Xamarin.Forms.XamlInjecter.html#Injecter_Xamarin_Forms_XamlInjecter_InjectProperty
  commentId: F:Injecter.Xamarin.Forms.XamlInjecter.InjectProperty
  fullName: Injecter.Xamarin.Forms.XamlInjecter.InjectProperty
  nameWithType: XamlInjecter.InjectProperty
- uid: Injecter.Xamarin.Forms.XamlInjecter.InjectScopedProperty
  name: InjectScopedProperty
  href: api/Injecter.Xamarin.Forms.XamlInjecter.html#Injecter_Xamarin_Forms_XamlInjecter_InjectScopedProperty
  commentId: F:Injecter.Xamarin.Forms.XamlInjecter.InjectScopedProperty
  fullName: Injecter.Xamarin.Forms.XamlInjecter.InjectScopedProperty
  nameWithType: XamlInjecter.InjectScopedProperty
- uid: Injecter.Xamarin.Forms.XamlInjecter.SetInject(Xamarin.Forms.BindableObject,System.Nullable{System.Boolean})
  name: SetInject(BindableObject, Nullable<Boolean>)
  href: api/Injecter.Xamarin.Forms.XamlInjecter.html#Injecter_Xamarin_Forms_XamlInjecter_SetInject_Xamarin_Forms_BindableObject_System_Nullable_System_Boolean__
  commentId: M:Injecter.Xamarin.Forms.XamlInjecter.SetInject(Xamarin.Forms.BindableObject,System.Nullable{System.Boolean})
  name.vb: SetInject(BindableObject, Nullable(Of Boolean))
  fullName: Injecter.Xamarin.Forms.XamlInjecter.SetInject(Xamarin.Forms.BindableObject, System.Nullable<System.Boolean>)
  fullName.vb: Injecter.Xamarin.Forms.XamlInjecter.SetInject(Xamarin.Forms.BindableObject, System.Nullable(Of System.Boolean))
  nameWithType: XamlInjecter.SetInject(BindableObject, Nullable<Boolean>)
  nameWithType.vb: XamlInjecter.SetInject(BindableObject, Nullable(Of Boolean))
- uid: Injecter.Xamarin.Forms.XamlInjecter.SetInject*
  name: SetInject
  href: api/Injecter.Xamarin.Forms.XamlInjecter.html#Injecter_Xamarin_Forms_XamlInjecter_SetInject_
  commentId: Overload:Injecter.Xamarin.Forms.XamlInjecter.SetInject
  isSpec: "True"
  fullName: Injecter.Xamarin.Forms.XamlInjecter.SetInject
  nameWithType: XamlInjecter.SetInject
- uid: Injecter.Xamarin.Forms.XamlInjecter.SetInjectScoped(Xamarin.Forms.BindableObject,System.Nullable{Injecter.Xamarin.Forms.DisposeBehaviour})
  name: SetInjectScoped(BindableObject, Nullable<DisposeBehaviour>)
  href: api/Injecter.Xamarin.Forms.XamlInjecter.html#Injecter_Xamarin_Forms_XamlInjecter_SetInjectScoped_Xamarin_Forms_BindableObject_System_Nullable_Injecter_Xamarin_Forms_DisposeBehaviour__
  commentId: M:Injecter.Xamarin.Forms.XamlInjecter.SetInjectScoped(Xamarin.Forms.BindableObject,System.Nullable{Injecter.Xamarin.Forms.DisposeBehaviour})
  name.vb: SetInjectScoped(BindableObject, Nullable(Of DisposeBehaviour))
  fullName: Injecter.Xamarin.Forms.XamlInjecter.SetInjectScoped(Xamarin.Forms.BindableObject, System.Nullable<Injecter.Xamarin.Forms.DisposeBehaviour>)
  fullName.vb: Injecter.Xamarin.Forms.XamlInjecter.SetInjectScoped(Xamarin.Forms.BindableObject, System.Nullable(Of Injecter.Xamarin.Forms.DisposeBehaviour))
  nameWithType: XamlInjecter.SetInjectScoped(BindableObject, Nullable<DisposeBehaviour>)
  nameWithType.vb: XamlInjecter.SetInjectScoped(BindableObject, Nullable(Of DisposeBehaviour))
- uid: Injecter.Xamarin.Forms.XamlInjecter.SetInjectScoped*
  name: SetInjectScoped
  href: api/Injecter.Xamarin.Forms.XamlInjecter.html#Injecter_Xamarin_Forms_XamlInjecter_SetInjectScoped_
  commentId: Overload:Injecter.Xamarin.Forms.XamlInjecter.SetInjectScoped
  isSpec: "True"
  fullName: Injecter.Xamarin.Forms.XamlInjecter.SetInjectScoped
  nameWithType: XamlInjecter.SetInjectScoped
